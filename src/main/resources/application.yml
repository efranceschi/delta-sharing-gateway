# =============================================================================
# COMMON CONFIGURATION (applies to all profiles)
# =============================================================================
spring:
  application:
    name: delta-sharing-onprem
  
  # Active Profile
  # Options: dev (development), prod (production)
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # Thymeleaf Configuration
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  error:
    include-message: always
    include-binding-errors: always

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true

# Delta Sharing Configuration - Common
delta:
  sharing:
    # Endpoint FQDN for credential file generation
    # This will be used in the downloadable credential file
    # IMPORTANT: In production, this MUST be configured to a public endpoint
    #            Localhost is only allowed in development
    # Example: https://data.company.com/delta-sharing
    endpoint-fqdn: ${DELTA_SHARING_ENDPOINT:}
    
    # API Token Configuration
    token:
      # Token expiration in days
      expiration-days: ${TOKEN_EXPIRATION_DAYS:365}
    
    # JSON Response Configuration
    json:
      # Enable pretty printing for JSON responses (indentation and line breaks)
      # Default: false (compact JSON for better compatibility and performance)
      # Set to true for human-readable JSON responses (useful for debugging)
      pretty-print: ${DELTA_SHARING_JSON_PRETTY_PRINT:false}
    
    # Advanced Delta Features Configuration
    features:
      # Enable Deletion Vectors support
      # When enabled, server will respect readerfeatures=deletionvectors from clients
      # When disabled, server will ignore deletionvectors requests and always return standard format
      # Default: false (disabled for broader compatibility)
      deletion-vectors:
        enabled: ${DELTA_SHARING_DELETION_VECTORS_ENABLED:false}
    
    # Cache Configuration for Schema and Metadata
    cache:
      schema:
        # Time-to-live for cached table schemas (in minutes)
        # Schemas are cached to avoid repeated Delta Log reads
        ttl-minutes: ${SCHEMA_CACHE_TTL_MINUTES:60}
        # Maximum number of schemas to cache
        max-size: ${SCHEMA_CACHE_MAX_SIZE:1000}

---
# =============================================================================
# DEVELOPMENT PROFILE (dev)
# - In-memory H2 Database
# - Fake Object Storage (HTTP)
# - Sample data initialization
# - Debug logging
# =============================================================================
spring:
  config:
    activate:
      on-profile: dev
  
  # Database Configuration - H2 In-Memory
  datasource:
    url: jdbc:h2:mem:deltasharing
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  # JPA Configuration - Development
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.H2Dialect
  
  # DevTools (only in dev)
  devtools:
    restart:
      enabled: true

# Delta Sharing Configuration - Development
delta:
  sharing:
    # Endpoint FQDN (Development Only)
    # Localhost is allowed in development
    endpoint-fqdn: http://localhost:8080/delta-sharing
    
    # Authentication Configuration (Development Only)
    auth:
      enabled: true
      # Legacy bearer token for backward compatibility in development
      # This is the same token used by the admin user in dev mode
      bearer-token: dss_0000000000000000000000000000000000000000000000000000000000000
    
    # Default Admin User Configuration (Development Only)
    admin:
      # Default password for the admin user (first initialization only)
      # This is only set in development for convenience
      default-password: DeltaSharing@Databricks
    
    storage:
      # Use FAKE storage in development
      type: fake
      
      fake:
        # Use HTTP in development
        url-protocol: http
        base-url: http://localhost:${SERVER_PORT:8080}

# Logging - Development
logging:
  level:
    com.databricks.deltasharing: DEBUG
    org.springframework.web: INFO
    org.hibernate: INFO
    org.springframework.security: INFO

---
# =============================================================================
# PRODUCTION PROFILE (prod)
# - PostgreSQL Database
# - MinIO Object Storage (HTTPS)
# - No sample data initialization
# - Info/Warn logging
# =============================================================================
spring:
  config:
    activate:
      on-profile: prod
  
  # Database Configuration - PostgreSQL
  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost:5432/deltasharing}
    driver-class-name: org.postgresql.Driver
    username: ${POSTGRES_USER:deltasharing}
    password: ${POSTGRES_PASSWORD:changeme}
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      minimum-idle: ${DB_POOL_MIN_IDLE:2}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
  
  # JPA Configuration - Production
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
  
  # DevTools (disabled in prod)
  devtools:
    restart:
      enabled: false

# Delta Sharing Configuration - Production
delta:
  sharing:
    # Endpoint FQDN (REQUIRED in Production)
    # This MUST be configured to a public endpoint accessible by clients
    # Localhost is NOT allowed in production
    # 
    # Configure via environment variable:
    #   export DELTA_SHARING_ENDPOINT=https://data.company.com/delta-sharing
    # 
    # Or directly in this file:
    #   endpoint-fqdn: https://data.company.com/delta-sharing
    # 
    # If not configured, the application will FAIL to start
    
    admin:
      default-password: ${DELTA_SHARING_ADMIN_PASSWORD:}

    # Authentication Configuration (Production)
    # No default bearer token in production for security reasons
    # If you want to use a legacy bearer token, configure it via environment variable:
    #   export DELTA_SHARING_ADMIN_TOKEN="your-token-here"
    auth:
      enabled: true
      bearer-token: ${DELTA_SHARING_ADMIN_TOKEN:}
    
    storage:
      # Use MinIO storage in production (recommended for S3-compatible object storage)
      type: minio
      
      # Alternative: Use HTTP storage for local filesystem Delta tables
      # type: http
      
      minio:
        enabled: true
        endpoint: ${DELTA_SHARING_STORAGE_MINIO_ENDPOINT:https://minio.your-domain.com}
        # Regular user credentials for data access (read-only recommended)
        access-key: ${DELTA_SHARING_STORAGE_MINIO_ACCESS_KEY:}
        secret-key: ${DELTA_SHARING_STORAGE_MINIO_SECRET_KEY:}
        bucket: ${DELTA_SHARING_STORAGE_MINIO_BUCKET:delta-sharing}
        url-expiration-minutes: ${DELTA_SHARING_STORAGE_MINIO_URL_EXPIRATION_MINUTES:60}
        # Use HTTPS for MinIO in production
        use-ssl: true
        # Admin credentials for cluster metrics and health monitoring (optional)
        # If not provided, detailed cluster metrics will not be available
        admin:
          enabled: ${DELTA_SHARING_STORAGE_MINIO_ADMIN_ENABLED:false}
          access-key: ${DELTA_SHARING_STORAGE_MINIO_ADMIN_ACCESS_KEY:}
          secret-key: ${DELTA_SHARING_STORAGE_MINIO_ADMIN_SECRET_KEY:}
      
      # HTTP Storage Configuration (for local filesystem Delta tables)
      http:
        enabled: true
        # Base URL for serving Parquet files via HTTP
        base-url: ${DELTA_SHARING_STORAGE_HTTP_BASE_URL:https://data.your-domain.com}
        # Local filesystem path where Delta tables are stored
        base-path: ${DELTA_SHARING_STORAGE_HTTP_BASE_PATH:/data/delta-tables}
        # Enable Delta transaction log reading
        use-delta-log: true

# Logging - Production
logging:
  level:
    com.databricks.deltasharing: INFO
    org.springframework.web: WARN
    org.hibernate: WARN
    org.springframework.security: WARN
    org.springframework.boot: INFO

# Spring Boot Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,httptrace,info
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 10ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
    web:
      server:
        request:
          autotime:
            enabled: true
    enable:
      cache: true
    cache:
      instrument-cache: true
