package com.databricks.deltasharing.controller;

import com.databricks.deltasharing.service.storage.FakeFileStorageService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;

/**
 * Controller for serving Parquet files generated by FakeFileStorageService.
 * Only active when FakeFileStorageService is enabled.
 */
@RestController
@RequiredArgsConstructor
@Slf4j
@ConditionalOnBean(FakeFileStorageService.class)
public class FileServingController {

    private final FakeFileStorageService fakeFileStorageService;

    /**
     * Serve a generated Parquet file
     * GET /fake-files/{fileName}
     */
    @GetMapping("/fake-files/{fileName}")
    public ResponseEntity<Resource> serveFile(@PathVariable String fileName) {
        log.debug("Serving fake Parquet file: {}", fileName);

        // Validate file name to prevent path traversal
        if (fileName.contains("..") || fileName.contains("/") || fileName.contains("\\")) {
            log.warn("Invalid file name requested: {}", fileName);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }

        // Get file from FakeFileStorageService
        File file = fakeFileStorageService.getGeneratedFile(fileName);

        if (file == null || !file.exists()) {
            log.warn("Fake Parquet file not found: {}", fileName);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        // Serve file
        Resource resource = new FileSystemResource(file);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setContentLength(file.length());
        headers.setContentDispositionFormData("attachment", fileName);

        log.info("Serving fake Parquet file: {} ({} bytes)", fileName, file.length());

        return ResponseEntity.ok()
                .headers(headers)
                .body(resource);
    }

    /**
     * Health check endpoint for fake file serving
     * GET /fake-files/health
     */
    @GetMapping("/fake-files/health")
    public ResponseEntity<String> health() {
        boolean available = fakeFileStorageService.isAvailable();
        
        if (available) {
            return ResponseEntity.ok("Fake file serving is active");
        } else {
            return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                    .body("Fake file serving is not available");
        }
    }
}

